/*
 * Seq API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package seq

import (
	"encoding/json"
	"fmt"
)

// Setting - struct for Setting
type Setting struct {
	AuthenticationProvider *AuthenticationProvider
	AutomaticAccessADGroup *AutomaticAccessADGroup
	AutomaticallyProvisionAuthenticatedUsers *AutomaticallyProvisionAuthenticatedUsers
	AzureADAuthority *AzureADAuthority
	AzureADClientId *AzureADClientId
	AzureADClientKey *AzureADClientKey
	AzureADTenantId *AzureADTenantId
	BackupLocation *BackupLocation
	BackupUtcTimeOfDay *BackupUtcTimeOfDay
	BackupsToKeep *BackupsToKeep
	CheckForPackageUpdates *CheckForPackageUpdates
	CheckForUpdates *CheckForUpdates
	InstanceTitle *InstanceTitle
	IsAuthenticationEnabled *IsAuthenticationEnabled
	MEqMTWriteFixAppliedAt *MEqMTWriteFixAppliedAt
	MinimumFreeStorageSpace *MinimumFreeStorageSpace
	MinimumPasswordLength *MinimumPasswordLength
	NewUserRoleIds *NewUserRoleIds
	NewUserShowDashboardIds *NewUserShowDashboardIds
	NewUserShowQueryIds *NewUserShowQueryIds
	NewUserShowSignalIds *NewUserShowSignalIds
	OpenIdConnectAuthority *OpenIdConnectAuthority
	OpenIdConnectClientId *OpenIdConnectClientId
	OpenIdConnectClientSecret *OpenIdConnectClientSecret
	OpenIdConnectEndSessionRedirectUri *OpenIdConnectEndSessionRedirectUri
	OpenIdConnectScopes *OpenIdConnectScopes
	PasswordRequiredCharacterClasses *PasswordRequiredCharacterClasses
	RawEventMaximumContentLength *RawEventMaximumContentLength
	RawPayloadMaximumContentLength *RawPayloadMaximumContentLength
	RequireApiKeyForWritingEvents *RequireApiKeyForWritingEvents
	SecretKeyIsBackedUp *SecretKeyIsBackedUp
	TelemetryId *TelemetryId
	TelemetryReplyEmail *TelemetryReplyEmail
	ThemeStyles *ThemeStyles
}

// AuthenticationProviderAsSetting is a convenience function that returns AuthenticationProvider wrapped in Setting
func AuthenticationProviderAsSetting(v *AuthenticationProvider) Setting {
	return Setting{ AuthenticationProvider: v}
}

// AutomaticAccessADGroupAsSetting is a convenience function that returns AutomaticAccessADGroup wrapped in Setting
func AutomaticAccessADGroupAsSetting(v *AutomaticAccessADGroup) Setting {
	return Setting{ AutomaticAccessADGroup: v}
}

// AutomaticallyProvisionAuthenticatedUsersAsSetting is a convenience function that returns AutomaticallyProvisionAuthenticatedUsers wrapped in Setting
func AutomaticallyProvisionAuthenticatedUsersAsSetting(v *AutomaticallyProvisionAuthenticatedUsers) Setting {
	return Setting{ AutomaticallyProvisionAuthenticatedUsers: v}
}

// AzureADAuthorityAsSetting is a convenience function that returns AzureADAuthority wrapped in Setting
func AzureADAuthorityAsSetting(v *AzureADAuthority) Setting {
	return Setting{ AzureADAuthority: v}
}

// AzureADClientIdAsSetting is a convenience function that returns AzureADClientId wrapped in Setting
func AzureADClientIdAsSetting(v *AzureADClientId) Setting {
	return Setting{ AzureADClientId: v}
}

// AzureADClientKeyAsSetting is a convenience function that returns AzureADClientKey wrapped in Setting
func AzureADClientKeyAsSetting(v *AzureADClientKey) Setting {
	return Setting{ AzureADClientKey: v}
}

// AzureADTenantIdAsSetting is a convenience function that returns AzureADTenantId wrapped in Setting
func AzureADTenantIdAsSetting(v *AzureADTenantId) Setting {
	return Setting{ AzureADTenantId: v}
}

// BackupLocationAsSetting is a convenience function that returns BackupLocation wrapped in Setting
func BackupLocationAsSetting(v *BackupLocation) Setting {
	return Setting{ BackupLocation: v}
}

// BackupUtcTimeOfDayAsSetting is a convenience function that returns BackupUtcTimeOfDay wrapped in Setting
func BackupUtcTimeOfDayAsSetting(v *BackupUtcTimeOfDay) Setting {
	return Setting{ BackupUtcTimeOfDay: v}
}

// BackupsToKeepAsSetting is a convenience function that returns BackupsToKeep wrapped in Setting
func BackupsToKeepAsSetting(v *BackupsToKeep) Setting {
	return Setting{ BackupsToKeep: v}
}

// CheckForPackageUpdatesAsSetting is a convenience function that returns CheckForPackageUpdates wrapped in Setting
func CheckForPackageUpdatesAsSetting(v *CheckForPackageUpdates) Setting {
	return Setting{ CheckForPackageUpdates: v}
}

// CheckForUpdatesAsSetting is a convenience function that returns CheckForUpdates wrapped in Setting
func CheckForUpdatesAsSetting(v *CheckForUpdates) Setting {
	return Setting{ CheckForUpdates: v}
}

// InstanceTitleAsSetting is a convenience function that returns InstanceTitle wrapped in Setting
func InstanceTitleAsSetting(v *InstanceTitle) Setting {
	return Setting{ InstanceTitle: v}
}

// IsAuthenticationEnabledAsSetting is a convenience function that returns IsAuthenticationEnabled wrapped in Setting
func IsAuthenticationEnabledAsSetting(v *IsAuthenticationEnabled) Setting {
	return Setting{ IsAuthenticationEnabled: v}
}

// MEqMTWriteFixAppliedAtAsSetting is a convenience function that returns MEqMTWriteFixAppliedAt wrapped in Setting
func MEqMTWriteFixAppliedAtAsSetting(v *MEqMTWriteFixAppliedAt) Setting {
	return Setting{ MEqMTWriteFixAppliedAt: v}
}

// MinimumFreeStorageSpaceAsSetting is a convenience function that returns MinimumFreeStorageSpace wrapped in Setting
func MinimumFreeStorageSpaceAsSetting(v *MinimumFreeStorageSpace) Setting {
	return Setting{ MinimumFreeStorageSpace: v}
}

// MinimumPasswordLengthAsSetting is a convenience function that returns MinimumPasswordLength wrapped in Setting
func MinimumPasswordLengthAsSetting(v *MinimumPasswordLength) Setting {
	return Setting{ MinimumPasswordLength: v}
}

// NewUserRoleIdsAsSetting is a convenience function that returns NewUserRoleIds wrapped in Setting
func NewUserRoleIdsAsSetting(v *NewUserRoleIds) Setting {
	return Setting{ NewUserRoleIds: v}
}

// NewUserShowDashboardIdsAsSetting is a convenience function that returns NewUserShowDashboardIds wrapped in Setting
func NewUserShowDashboardIdsAsSetting(v *NewUserShowDashboardIds) Setting {
	return Setting{ NewUserShowDashboardIds: v}
}

// NewUserShowQueryIdsAsSetting is a convenience function that returns NewUserShowQueryIds wrapped in Setting
func NewUserShowQueryIdsAsSetting(v *NewUserShowQueryIds) Setting {
	return Setting{ NewUserShowQueryIds: v}
}

// NewUserShowSignalIdsAsSetting is a convenience function that returns NewUserShowSignalIds wrapped in Setting
func NewUserShowSignalIdsAsSetting(v *NewUserShowSignalIds) Setting {
	return Setting{ NewUserShowSignalIds: v}
}

// OpenIdConnectAuthorityAsSetting is a convenience function that returns OpenIdConnectAuthority wrapped in Setting
func OpenIdConnectAuthorityAsSetting(v *OpenIdConnectAuthority) Setting {
	return Setting{ OpenIdConnectAuthority: v}
}

// OpenIdConnectClientIdAsSetting is a convenience function that returns OpenIdConnectClientId wrapped in Setting
func OpenIdConnectClientIdAsSetting(v *OpenIdConnectClientId) Setting {
	return Setting{ OpenIdConnectClientId: v}
}

// OpenIdConnectClientSecretAsSetting is a convenience function that returns OpenIdConnectClientSecret wrapped in Setting
func OpenIdConnectClientSecretAsSetting(v *OpenIdConnectClientSecret) Setting {
	return Setting{ OpenIdConnectClientSecret: v}
}

// OpenIdConnectEndSessionRedirectUriAsSetting is a convenience function that returns OpenIdConnectEndSessionRedirectUri wrapped in Setting
func OpenIdConnectEndSessionRedirectUriAsSetting(v *OpenIdConnectEndSessionRedirectUri) Setting {
	return Setting{ OpenIdConnectEndSessionRedirectUri: v}
}

// OpenIdConnectScopesAsSetting is a convenience function that returns OpenIdConnectScopes wrapped in Setting
func OpenIdConnectScopesAsSetting(v *OpenIdConnectScopes) Setting {
	return Setting{ OpenIdConnectScopes: v}
}

// PasswordRequiredCharacterClassesAsSetting is a convenience function that returns PasswordRequiredCharacterClasses wrapped in Setting
func PasswordRequiredCharacterClassesAsSetting(v *PasswordRequiredCharacterClasses) Setting {
	return Setting{ PasswordRequiredCharacterClasses: v}
}

// RawEventMaximumContentLengthAsSetting is a convenience function that returns RawEventMaximumContentLength wrapped in Setting
func RawEventMaximumContentLengthAsSetting(v *RawEventMaximumContentLength) Setting {
	return Setting{ RawEventMaximumContentLength: v}
}

// RawPayloadMaximumContentLengthAsSetting is a convenience function that returns RawPayloadMaximumContentLength wrapped in Setting
func RawPayloadMaximumContentLengthAsSetting(v *RawPayloadMaximumContentLength) Setting {
	return Setting{ RawPayloadMaximumContentLength: v}
}

// RequireApiKeyForWritingEventsAsSetting is a convenience function that returns RequireApiKeyForWritingEvents wrapped in Setting
func RequireApiKeyForWritingEventsAsSetting(v *RequireApiKeyForWritingEvents) Setting {
	return Setting{ RequireApiKeyForWritingEvents: v}
}

// SecretKeyIsBackedUpAsSetting is a convenience function that returns SecretKeyIsBackedUp wrapped in Setting
func SecretKeyIsBackedUpAsSetting(v *SecretKeyIsBackedUp) Setting {
	return Setting{ SecretKeyIsBackedUp: v}
}

// TelemetryIdAsSetting is a convenience function that returns TelemetryId wrapped in Setting
func TelemetryIdAsSetting(v *TelemetryId) Setting {
	return Setting{ TelemetryId: v}
}

// TelemetryReplyEmailAsSetting is a convenience function that returns TelemetryReplyEmail wrapped in Setting
func TelemetryReplyEmailAsSetting(v *TelemetryReplyEmail) Setting {
	return Setting{ TelemetryReplyEmail: v}
}

// ThemeStylesAsSetting is a convenience function that returns ThemeStyles wrapped in Setting
func ThemeStylesAsSetting(v *ThemeStyles) Setting {
	return Setting{ ThemeStyles: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Setting) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discrimintor lookup.")
	}

	// check if the discriminator value is 'AuthenticationProvider'
	if jsonDict["Id"] == "AuthenticationProvider" {
		// try to unmarshal JSON data into AuthenticationProvider
		err = json.Unmarshal(data, &dst.AuthenticationProvider)
		if err == nil {
			return nil // data stored in dst.AuthenticationProvider, return on the first match
		} else {
			dst.AuthenticationProvider = nil
			return fmt.Errorf("Failed to unmarshal Setting as AuthenticationProvider: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AutomaticAccessADGroup'
	if jsonDict["Id"] == "AutomaticAccessADGroup" {
		// try to unmarshal JSON data into AutomaticAccessADGroup
		err = json.Unmarshal(data, &dst.AutomaticAccessADGroup)
		if err == nil {
			return nil // data stored in dst.AutomaticAccessADGroup, return on the first match
		} else {
			dst.AutomaticAccessADGroup = nil
			return fmt.Errorf("Failed to unmarshal Setting as AutomaticAccessADGroup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AutomaticallyProvisionAuthenticatedUsers'
	if jsonDict["Id"] == "AutomaticallyProvisionAuthenticatedUsers" {
		// try to unmarshal JSON data into AutomaticallyProvisionAuthenticatedUsers
		err = json.Unmarshal(data, &dst.AutomaticallyProvisionAuthenticatedUsers)
		if err == nil {
			return nil // data stored in dst.AutomaticallyProvisionAuthenticatedUsers, return on the first match
		} else {
			dst.AutomaticallyProvisionAuthenticatedUsers = nil
			return fmt.Errorf("Failed to unmarshal Setting as AutomaticallyProvisionAuthenticatedUsers: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureADAuthority'
	if jsonDict["Id"] == "AzureADAuthority" {
		// try to unmarshal JSON data into AzureADAuthority
		err = json.Unmarshal(data, &dst.AzureADAuthority)
		if err == nil {
			return nil // data stored in dst.AzureADAuthority, return on the first match
		} else {
			dst.AzureADAuthority = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADAuthority: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureADClientId'
	if jsonDict["Id"] == "AzureADClientId" {
		// try to unmarshal JSON data into AzureADClientId
		err = json.Unmarshal(data, &dst.AzureADClientId)
		if err == nil {
			return nil // data stored in dst.AzureADClientId, return on the first match
		} else {
			dst.AzureADClientId = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADClientId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureADClientKey'
	if jsonDict["Id"] == "AzureADClientKey" {
		// try to unmarshal JSON data into AzureADClientKey
		err = json.Unmarshal(data, &dst.AzureADClientKey)
		if err == nil {
			return nil // data stored in dst.AzureADClientKey, return on the first match
		} else {
			dst.AzureADClientKey = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADClientKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureADTenantId'
	if jsonDict["Id"] == "AzureADTenantId" {
		// try to unmarshal JSON data into AzureADTenantId
		err = json.Unmarshal(data, &dst.AzureADTenantId)
		if err == nil {
			return nil // data stored in dst.AzureADTenantId, return on the first match
		} else {
			dst.AzureADTenantId = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADTenantId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BackupLocation'
	if jsonDict["Id"] == "BackupLocation" {
		// try to unmarshal JSON data into BackupLocation
		err = json.Unmarshal(data, &dst.BackupLocation)
		if err == nil {
			return nil // data stored in dst.BackupLocation, return on the first match
		} else {
			dst.BackupLocation = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupLocation: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BackupUtcTimeOfDay'
	if jsonDict["Id"] == "BackupUtcTimeOfDay" {
		// try to unmarshal JSON data into BackupUtcTimeOfDay
		err = json.Unmarshal(data, &dst.BackupUtcTimeOfDay)
		if err == nil {
			return nil // data stored in dst.BackupUtcTimeOfDay, return on the first match
		} else {
			dst.BackupUtcTimeOfDay = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupUtcTimeOfDay: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BackupsToKeep'
	if jsonDict["Id"] == "BackupsToKeep" {
		// try to unmarshal JSON data into BackupsToKeep
		err = json.Unmarshal(data, &dst.BackupsToKeep)
		if err == nil {
			return nil // data stored in dst.BackupsToKeep, return on the first match
		} else {
			dst.BackupsToKeep = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupsToKeep: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckForPackageUpdates'
	if jsonDict["Id"] == "CheckForPackageUpdates" {
		// try to unmarshal JSON data into CheckForPackageUpdates
		err = json.Unmarshal(data, &dst.CheckForPackageUpdates)
		if err == nil {
			return nil // data stored in dst.CheckForPackageUpdates, return on the first match
		} else {
			dst.CheckForPackageUpdates = nil
			return fmt.Errorf("Failed to unmarshal Setting as CheckForPackageUpdates: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CheckForUpdates'
	if jsonDict["Id"] == "CheckForUpdates" {
		// try to unmarshal JSON data into CheckForUpdates
		err = json.Unmarshal(data, &dst.CheckForUpdates)
		if err == nil {
			return nil // data stored in dst.CheckForUpdates, return on the first match
		} else {
			dst.CheckForUpdates = nil
			return fmt.Errorf("Failed to unmarshal Setting as CheckForUpdates: %s", err.Error())
		}
	}

	// check if the discriminator value is 'InstanceTitle'
	if jsonDict["Id"] == "InstanceTitle" {
		// try to unmarshal JSON data into InstanceTitle
		err = json.Unmarshal(data, &dst.InstanceTitle)
		if err == nil {
			return nil // data stored in dst.InstanceTitle, return on the first match
		} else {
			dst.InstanceTitle = nil
			return fmt.Errorf("Failed to unmarshal Setting as InstanceTitle: %s", err.Error())
		}
	}

	// check if the discriminator value is 'IsAuthenticationEnabled'
	if jsonDict["Id"] == "IsAuthenticationEnabled" {
		// try to unmarshal JSON data into IsAuthenticationEnabled
		err = json.Unmarshal(data, &dst.IsAuthenticationEnabled)
		if err == nil {
			return nil // data stored in dst.IsAuthenticationEnabled, return on the first match
		} else {
			dst.IsAuthenticationEnabled = nil
			return fmt.Errorf("Failed to unmarshal Setting as IsAuthenticationEnabled: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MEqMTWriteFixAppliedAt'
	if jsonDict["Id"] == "MEqMTWriteFixAppliedAt" {
		// try to unmarshal JSON data into MEqMTWriteFixAppliedAt
		err = json.Unmarshal(data, &dst.MEqMTWriteFixAppliedAt)
		if err == nil {
			return nil // data stored in dst.MEqMTWriteFixAppliedAt, return on the first match
		} else {
			dst.MEqMTWriteFixAppliedAt = nil
			return fmt.Errorf("Failed to unmarshal Setting as MEqMTWriteFixAppliedAt: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MinimumFreeStorageSpace'
	if jsonDict["Id"] == "MinimumFreeStorageSpace" {
		// try to unmarshal JSON data into MinimumFreeStorageSpace
		err = json.Unmarshal(data, &dst.MinimumFreeStorageSpace)
		if err == nil {
			return nil // data stored in dst.MinimumFreeStorageSpace, return on the first match
		} else {
			dst.MinimumFreeStorageSpace = nil
			return fmt.Errorf("Failed to unmarshal Setting as MinimumFreeStorageSpace: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MinimumPasswordLength'
	if jsonDict["Id"] == "MinimumPasswordLength" {
		// try to unmarshal JSON data into MinimumPasswordLength
		err = json.Unmarshal(data, &dst.MinimumPasswordLength)
		if err == nil {
			return nil // data stored in dst.MinimumPasswordLength, return on the first match
		} else {
			dst.MinimumPasswordLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as MinimumPasswordLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NewUserRoleIds'
	if jsonDict["Id"] == "NewUserRoleIds" {
		// try to unmarshal JSON data into NewUserRoleIds
		err = json.Unmarshal(data, &dst.NewUserRoleIds)
		if err == nil {
			return nil // data stored in dst.NewUserRoleIds, return on the first match
		} else {
			dst.NewUserRoleIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserRoleIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NewUserShowDashboardIds'
	if jsonDict["Id"] == "NewUserShowDashboardIds" {
		// try to unmarshal JSON data into NewUserShowDashboardIds
		err = json.Unmarshal(data, &dst.NewUserShowDashboardIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowDashboardIds, return on the first match
		} else {
			dst.NewUserShowDashboardIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowDashboardIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NewUserShowQueryIds'
	if jsonDict["Id"] == "NewUserShowQueryIds" {
		// try to unmarshal JSON data into NewUserShowQueryIds
		err = json.Unmarshal(data, &dst.NewUserShowQueryIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowQueryIds, return on the first match
		} else {
			dst.NewUserShowQueryIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowQueryIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NewUserShowSignalIds'
	if jsonDict["Id"] == "NewUserShowSignalIds" {
		// try to unmarshal JSON data into NewUserShowSignalIds
		err = json.Unmarshal(data, &dst.NewUserShowSignalIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowSignalIds, return on the first match
		} else {
			dst.NewUserShowSignalIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowSignalIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OpenIdConnectAuthority'
	if jsonDict["Id"] == "OpenIdConnectAuthority" {
		// try to unmarshal JSON data into OpenIdConnectAuthority
		err = json.Unmarshal(data, &dst.OpenIdConnectAuthority)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectAuthority, return on the first match
		} else {
			dst.OpenIdConnectAuthority = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectAuthority: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OpenIdConnectClientId'
	if jsonDict["Id"] == "OpenIdConnectClientId" {
		// try to unmarshal JSON data into OpenIdConnectClientId
		err = json.Unmarshal(data, &dst.OpenIdConnectClientId)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectClientId, return on the first match
		} else {
			dst.OpenIdConnectClientId = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectClientId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OpenIdConnectClientSecret'
	if jsonDict["Id"] == "OpenIdConnectClientSecret" {
		// try to unmarshal JSON data into OpenIdConnectClientSecret
		err = json.Unmarshal(data, &dst.OpenIdConnectClientSecret)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectClientSecret, return on the first match
		} else {
			dst.OpenIdConnectClientSecret = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectClientSecret: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OpenIdConnectEndSessionRedirectUri'
	if jsonDict["Id"] == "OpenIdConnectEndSessionRedirectUri" {
		// try to unmarshal JSON data into OpenIdConnectEndSessionRedirectUri
		err = json.Unmarshal(data, &dst.OpenIdConnectEndSessionRedirectUri)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectEndSessionRedirectUri, return on the first match
		} else {
			dst.OpenIdConnectEndSessionRedirectUri = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectEndSessionRedirectUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OpenIdConnectScopes'
	if jsonDict["Id"] == "OpenIdConnectScopes" {
		// try to unmarshal JSON data into OpenIdConnectScopes
		err = json.Unmarshal(data, &dst.OpenIdConnectScopes)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectScopes, return on the first match
		} else {
			dst.OpenIdConnectScopes = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectScopes: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PasswordRequiredCharacterClasses'
	if jsonDict["Id"] == "PasswordRequiredCharacterClasses" {
		// try to unmarshal JSON data into PasswordRequiredCharacterClasses
		err = json.Unmarshal(data, &dst.PasswordRequiredCharacterClasses)
		if err == nil {
			return nil // data stored in dst.PasswordRequiredCharacterClasses, return on the first match
		} else {
			dst.PasswordRequiredCharacterClasses = nil
			return fmt.Errorf("Failed to unmarshal Setting as PasswordRequiredCharacterClasses: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawEventMaximumContentLength'
	if jsonDict["Id"] == "RawEventMaximumContentLength" {
		// try to unmarshal JSON data into RawEventMaximumContentLength
		err = json.Unmarshal(data, &dst.RawEventMaximumContentLength)
		if err == nil {
			return nil // data stored in dst.RawEventMaximumContentLength, return on the first match
		} else {
			dst.RawEventMaximumContentLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as RawEventMaximumContentLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawPayloadMaximumContentLength'
	if jsonDict["Id"] == "RawPayloadMaximumContentLength" {
		// try to unmarshal JSON data into RawPayloadMaximumContentLength
		err = json.Unmarshal(data, &dst.RawPayloadMaximumContentLength)
		if err == nil {
			return nil // data stored in dst.RawPayloadMaximumContentLength, return on the first match
		} else {
			dst.RawPayloadMaximumContentLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as RawPayloadMaximumContentLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RequireApiKeyForWritingEvents'
	if jsonDict["Id"] == "RequireApiKeyForWritingEvents" {
		// try to unmarshal JSON data into RequireApiKeyForWritingEvents
		err = json.Unmarshal(data, &dst.RequireApiKeyForWritingEvents)
		if err == nil {
			return nil // data stored in dst.RequireApiKeyForWritingEvents, return on the first match
		} else {
			dst.RequireApiKeyForWritingEvents = nil
			return fmt.Errorf("Failed to unmarshal Setting as RequireApiKeyForWritingEvents: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SecretKeyIsBackedUp'
	if jsonDict["Id"] == "SecretKeyIsBackedUp" {
		// try to unmarshal JSON data into SecretKeyIsBackedUp
		err = json.Unmarshal(data, &dst.SecretKeyIsBackedUp)
		if err == nil {
			return nil // data stored in dst.SecretKeyIsBackedUp, return on the first match
		} else {
			dst.SecretKeyIsBackedUp = nil
			return fmt.Errorf("Failed to unmarshal Setting as SecretKeyIsBackedUp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TelemetryId'
	if jsonDict["Id"] == "TelemetryId" {
		// try to unmarshal JSON data into TelemetryId
		err = json.Unmarshal(data, &dst.TelemetryId)
		if err == nil {
			return nil // data stored in dst.TelemetryId, return on the first match
		} else {
			dst.TelemetryId = nil
			return fmt.Errorf("Failed to unmarshal Setting as TelemetryId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TelemetryReplyEmail'
	if jsonDict["Id"] == "TelemetryReplyEmail" {
		// try to unmarshal JSON data into TelemetryReplyEmail
		err = json.Unmarshal(data, &dst.TelemetryReplyEmail)
		if err == nil {
			return nil // data stored in dst.TelemetryReplyEmail, return on the first match
		} else {
			dst.TelemetryReplyEmail = nil
			return fmt.Errorf("Failed to unmarshal Setting as TelemetryReplyEmail: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ThemeStyles'
	if jsonDict["Id"] == "ThemeStyles" {
		// try to unmarshal JSON data into ThemeStyles
		err = json.Unmarshal(data, &dst.ThemeStyles)
		if err == nil {
			return nil // data stored in dst.ThemeStyles, return on the first match
		} else {
			dst.ThemeStyles = nil
			return fmt.Errorf("Failed to unmarshal Setting as ThemeStyles: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-authenticationprovider'
	if jsonDict["Id"] == "setting-authenticationprovider" {
		// try to unmarshal JSON data into AuthenticationProvider
		err = json.Unmarshal(data, &dst.AuthenticationProvider)
		if err == nil {
			return nil // data stored in dst.AuthenticationProvider, return on the first match
		} else {
			dst.AuthenticationProvider = nil
			return fmt.Errorf("Failed to unmarshal Setting as AuthenticationProvider: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-automaticaccessadgroup'
	if jsonDict["Id"] == "setting-automaticaccessadgroup" {
		// try to unmarshal JSON data into AutomaticAccessADGroup
		err = json.Unmarshal(data, &dst.AutomaticAccessADGroup)
		if err == nil {
			return nil // data stored in dst.AutomaticAccessADGroup, return on the first match
		} else {
			dst.AutomaticAccessADGroup = nil
			return fmt.Errorf("Failed to unmarshal Setting as AutomaticAccessADGroup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-automaticallyprovisionauthenticatedusers'
	if jsonDict["Id"] == "setting-automaticallyprovisionauthenticatedusers" {
		// try to unmarshal JSON data into AutomaticallyProvisionAuthenticatedUsers
		err = json.Unmarshal(data, &dst.AutomaticallyProvisionAuthenticatedUsers)
		if err == nil {
			return nil // data stored in dst.AutomaticallyProvisionAuthenticatedUsers, return on the first match
		} else {
			dst.AutomaticallyProvisionAuthenticatedUsers = nil
			return fmt.Errorf("Failed to unmarshal Setting as AutomaticallyProvisionAuthenticatedUsers: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-azureadauthority'
	if jsonDict["Id"] == "setting-azureadauthority" {
		// try to unmarshal JSON data into AzureADAuthority
		err = json.Unmarshal(data, &dst.AzureADAuthority)
		if err == nil {
			return nil // data stored in dst.AzureADAuthority, return on the first match
		} else {
			dst.AzureADAuthority = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADAuthority: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-azureadclientid'
	if jsonDict["Id"] == "setting-azureadclientid" {
		// try to unmarshal JSON data into AzureADClientId
		err = json.Unmarshal(data, &dst.AzureADClientId)
		if err == nil {
			return nil // data stored in dst.AzureADClientId, return on the first match
		} else {
			dst.AzureADClientId = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADClientId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-azureadclientkey'
	if jsonDict["Id"] == "setting-azureadclientkey" {
		// try to unmarshal JSON data into AzureADClientKey
		err = json.Unmarshal(data, &dst.AzureADClientKey)
		if err == nil {
			return nil // data stored in dst.AzureADClientKey, return on the first match
		} else {
			dst.AzureADClientKey = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADClientKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-azureadtenantid'
	if jsonDict["Id"] == "setting-azureadtenantid" {
		// try to unmarshal JSON data into AzureADTenantId
		err = json.Unmarshal(data, &dst.AzureADTenantId)
		if err == nil {
			return nil // data stored in dst.AzureADTenantId, return on the first match
		} else {
			dst.AzureADTenantId = nil
			return fmt.Errorf("Failed to unmarshal Setting as AzureADTenantId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-backuplocation'
	if jsonDict["Id"] == "setting-backuplocation" {
		// try to unmarshal JSON data into BackupLocation
		err = json.Unmarshal(data, &dst.BackupLocation)
		if err == nil {
			return nil // data stored in dst.BackupLocation, return on the first match
		} else {
			dst.BackupLocation = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupLocation: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-backupstokeep'
	if jsonDict["Id"] == "setting-backupstokeep" {
		// try to unmarshal JSON data into BackupsToKeep
		err = json.Unmarshal(data, &dst.BackupsToKeep)
		if err == nil {
			return nil // data stored in dst.BackupsToKeep, return on the first match
		} else {
			dst.BackupsToKeep = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupsToKeep: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-backuputctimeofday'
	if jsonDict["Id"] == "setting-backuputctimeofday" {
		// try to unmarshal JSON data into BackupUtcTimeOfDay
		err = json.Unmarshal(data, &dst.BackupUtcTimeOfDay)
		if err == nil {
			return nil // data stored in dst.BackupUtcTimeOfDay, return on the first match
		} else {
			dst.BackupUtcTimeOfDay = nil
			return fmt.Errorf("Failed to unmarshal Setting as BackupUtcTimeOfDay: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-checkforpackageupdates'
	if jsonDict["Id"] == "setting-checkforpackageupdates" {
		// try to unmarshal JSON data into CheckForPackageUpdates
		err = json.Unmarshal(data, &dst.CheckForPackageUpdates)
		if err == nil {
			return nil // data stored in dst.CheckForPackageUpdates, return on the first match
		} else {
			dst.CheckForPackageUpdates = nil
			return fmt.Errorf("Failed to unmarshal Setting as CheckForPackageUpdates: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-checkforupdates'
	if jsonDict["Id"] == "setting-checkforupdates" {
		// try to unmarshal JSON data into CheckForUpdates
		err = json.Unmarshal(data, &dst.CheckForUpdates)
		if err == nil {
			return nil // data stored in dst.CheckForUpdates, return on the first match
		} else {
			dst.CheckForUpdates = nil
			return fmt.Errorf("Failed to unmarshal Setting as CheckForUpdates: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-instancetitle'
	if jsonDict["Id"] == "setting-instancetitle" {
		// try to unmarshal JSON data into InstanceTitle
		err = json.Unmarshal(data, &dst.InstanceTitle)
		if err == nil {
			return nil // data stored in dst.InstanceTitle, return on the first match
		} else {
			dst.InstanceTitle = nil
			return fmt.Errorf("Failed to unmarshal Setting as InstanceTitle: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-isauthenticationenabled'
	if jsonDict["Id"] == "setting-isauthenticationenabled" {
		// try to unmarshal JSON data into IsAuthenticationEnabled
		err = json.Unmarshal(data, &dst.IsAuthenticationEnabled)
		if err == nil {
			return nil // data stored in dst.IsAuthenticationEnabled, return on the first match
		} else {
			dst.IsAuthenticationEnabled = nil
			return fmt.Errorf("Failed to unmarshal Setting as IsAuthenticationEnabled: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-minimumfreestoragespace'
	if jsonDict["Id"] == "setting-minimumfreestoragespace" {
		// try to unmarshal JSON data into MinimumFreeStorageSpace
		err = json.Unmarshal(data, &dst.MinimumFreeStorageSpace)
		if err == nil {
			return nil // data stored in dst.MinimumFreeStorageSpace, return on the first match
		} else {
			dst.MinimumFreeStorageSpace = nil
			return fmt.Errorf("Failed to unmarshal Setting as MinimumFreeStorageSpace: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-minimumpasswordlength'
	if jsonDict["Id"] == "setting-minimumpasswordlength" {
		// try to unmarshal JSON data into MinimumPasswordLength
		err = json.Unmarshal(data, &dst.MinimumPasswordLength)
		if err == nil {
			return nil // data stored in dst.MinimumPasswordLength, return on the first match
		} else {
			dst.MinimumPasswordLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as MinimumPasswordLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-newuserroleids'
	if jsonDict["Id"] == "setting-newuserroleids" {
		// try to unmarshal JSON data into NewUserRoleIds
		err = json.Unmarshal(data, &dst.NewUserRoleIds)
		if err == nil {
			return nil // data stored in dst.NewUserRoleIds, return on the first match
		} else {
			dst.NewUserRoleIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserRoleIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-newusershowdashboardids'
	if jsonDict["Id"] == "setting-newusershowdashboardids" {
		// try to unmarshal JSON data into NewUserShowDashboardIds
		err = json.Unmarshal(data, &dst.NewUserShowDashboardIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowDashboardIds, return on the first match
		} else {
			dst.NewUserShowDashboardIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowDashboardIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-newusershowqueryids'
	if jsonDict["Id"] == "setting-newusershowqueryids" {
		// try to unmarshal JSON data into NewUserShowQueryIds
		err = json.Unmarshal(data, &dst.NewUserShowQueryIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowQueryIds, return on the first match
		} else {
			dst.NewUserShowQueryIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowQueryIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-newusershowsignalids'
	if jsonDict["Id"] == "setting-newusershowsignalids" {
		// try to unmarshal JSON data into NewUserShowSignalIds
		err = json.Unmarshal(data, &dst.NewUserShowSignalIds)
		if err == nil {
			return nil // data stored in dst.NewUserShowSignalIds, return on the first match
		} else {
			dst.NewUserShowSignalIds = nil
			return fmt.Errorf("Failed to unmarshal Setting as NewUserShowSignalIds: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-openidconnectauthority'
	if jsonDict["Id"] == "setting-openidconnectauthority" {
		// try to unmarshal JSON data into OpenIdConnectAuthority
		err = json.Unmarshal(data, &dst.OpenIdConnectAuthority)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectAuthority, return on the first match
		} else {
			dst.OpenIdConnectAuthority = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectAuthority: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-openidconnectclientid'
	if jsonDict["Id"] == "setting-openidconnectclientid" {
		// try to unmarshal JSON data into OpenIdConnectClientId
		err = json.Unmarshal(data, &dst.OpenIdConnectClientId)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectClientId, return on the first match
		} else {
			dst.OpenIdConnectClientId = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectClientId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-openidconnectclientsecret'
	if jsonDict["Id"] == "setting-openidconnectclientsecret" {
		// try to unmarshal JSON data into OpenIdConnectClientSecret
		err = json.Unmarshal(data, &dst.OpenIdConnectClientSecret)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectClientSecret, return on the first match
		} else {
			dst.OpenIdConnectClientSecret = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectClientSecret: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-openidconnectendsessionredirecturi'
	if jsonDict["Id"] == "setting-openidconnectendsessionredirecturi" {
		// try to unmarshal JSON data into OpenIdConnectEndSessionRedirectUri
		err = json.Unmarshal(data, &dst.OpenIdConnectEndSessionRedirectUri)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectEndSessionRedirectUri, return on the first match
		} else {
			dst.OpenIdConnectEndSessionRedirectUri = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectEndSessionRedirectUri: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-openidconnectscopes'
	if jsonDict["Id"] == "setting-openidconnectscopes" {
		// try to unmarshal JSON data into OpenIdConnectScopes
		err = json.Unmarshal(data, &dst.OpenIdConnectScopes)
		if err == nil {
			return nil // data stored in dst.OpenIdConnectScopes, return on the first match
		} else {
			dst.OpenIdConnectScopes = nil
			return fmt.Errorf("Failed to unmarshal Setting as OpenIdConnectScopes: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-passwordrequiredcharacterclasses'
	if jsonDict["Id"] == "setting-passwordrequiredcharacterclasses" {
		// try to unmarshal JSON data into PasswordRequiredCharacterClasses
		err = json.Unmarshal(data, &dst.PasswordRequiredCharacterClasses)
		if err == nil {
			return nil // data stored in dst.PasswordRequiredCharacterClasses, return on the first match
		} else {
			dst.PasswordRequiredCharacterClasses = nil
			return fmt.Errorf("Failed to unmarshal Setting as PasswordRequiredCharacterClasses: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-raweventmaximumcontentlength'
	if jsonDict["Id"] == "setting-raweventmaximumcontentlength" {
		// try to unmarshal JSON data into RawEventMaximumContentLength
		err = json.Unmarshal(data, &dst.RawEventMaximumContentLength)
		if err == nil {
			return nil // data stored in dst.RawEventMaximumContentLength, return on the first match
		} else {
			dst.RawEventMaximumContentLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as RawEventMaximumContentLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-rawpayloadmaximumcontentlength'
	if jsonDict["Id"] == "setting-rawpayloadmaximumcontentlength" {
		// try to unmarshal JSON data into RawPayloadMaximumContentLength
		err = json.Unmarshal(data, &dst.RawPayloadMaximumContentLength)
		if err == nil {
			return nil // data stored in dst.RawPayloadMaximumContentLength, return on the first match
		} else {
			dst.RawPayloadMaximumContentLength = nil
			return fmt.Errorf("Failed to unmarshal Setting as RawPayloadMaximumContentLength: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-requireapikeyforwritingevents'
	if jsonDict["Id"] == "setting-requireapikeyforwritingevents" {
		// try to unmarshal JSON data into RequireApiKeyForWritingEvents
		err = json.Unmarshal(data, &dst.RequireApiKeyForWritingEvents)
		if err == nil {
			return nil // data stored in dst.RequireApiKeyForWritingEvents, return on the first match
		} else {
			dst.RequireApiKeyForWritingEvents = nil
			return fmt.Errorf("Failed to unmarshal Setting as RequireApiKeyForWritingEvents: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-secretkeyisbackedup'
	if jsonDict["Id"] == "setting-secretkeyisbackedup" {
		// try to unmarshal JSON data into SecretKeyIsBackedUp
		err = json.Unmarshal(data, &dst.SecretKeyIsBackedUp)
		if err == nil {
			return nil // data stored in dst.SecretKeyIsBackedUp, return on the first match
		} else {
			dst.SecretKeyIsBackedUp = nil
			return fmt.Errorf("Failed to unmarshal Setting as SecretKeyIsBackedUp: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-telemetryid'
	if jsonDict["Id"] == "setting-telemetryid" {
		// try to unmarshal JSON data into TelemetryId
		err = json.Unmarshal(data, &dst.TelemetryId)
		if err == nil {
			return nil // data stored in dst.TelemetryId, return on the first match
		} else {
			dst.TelemetryId = nil
			return fmt.Errorf("Failed to unmarshal Setting as TelemetryId: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-telemetryreplyemail'
	if jsonDict["Id"] == "setting-telemetryreplyemail" {
		// try to unmarshal JSON data into TelemetryReplyEmail
		err = json.Unmarshal(data, &dst.TelemetryReplyEmail)
		if err == nil {
			return nil // data stored in dst.TelemetryReplyEmail, return on the first match
		} else {
			dst.TelemetryReplyEmail = nil
			return fmt.Errorf("Failed to unmarshal Setting as TelemetryReplyEmail: %s", err.Error())
		}
	}

	// check if the discriminator value is 'setting-themestyles'
	if jsonDict["Id"] == "setting-themestyles" {
		// try to unmarshal JSON data into ThemeStyles
		err = json.Unmarshal(data, &dst.ThemeStyles)
		if err == nil {
			return nil // data stored in dst.ThemeStyles, return on the first match
		} else {
			dst.ThemeStyles = nil
			return fmt.Errorf("Failed to unmarshal Setting as ThemeStyles: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Setting) MarshalJSON() ([]byte, error) {
	if src.AuthenticationProvider != nil {
		return json.Marshal(&src.AuthenticationProvider)
	}

	if src.AutomaticAccessADGroup != nil {
		return json.Marshal(&src.AutomaticAccessADGroup)
	}

	if src.AutomaticallyProvisionAuthenticatedUsers != nil {
		return json.Marshal(&src.AutomaticallyProvisionAuthenticatedUsers)
	}

	if src.AzureADAuthority != nil {
		return json.Marshal(&src.AzureADAuthority)
	}

	if src.AzureADClientId != nil {
		return json.Marshal(&src.AzureADClientId)
	}

	if src.AzureADClientKey != nil {
		return json.Marshal(&src.AzureADClientKey)
	}

	if src.AzureADTenantId != nil {
		return json.Marshal(&src.AzureADTenantId)
	}

	if src.BackupLocation != nil {
		return json.Marshal(&src.BackupLocation)
	}

	if src.BackupUtcTimeOfDay != nil {
		return json.Marshal(&src.BackupUtcTimeOfDay)
	}

	if src.BackupsToKeep != nil {
		return json.Marshal(&src.BackupsToKeep)
	}

	if src.CheckForPackageUpdates != nil {
		return json.Marshal(&src.CheckForPackageUpdates)
	}

	if src.CheckForUpdates != nil {
		return json.Marshal(&src.CheckForUpdates)
	}

	if src.InstanceTitle != nil {
		return json.Marshal(&src.InstanceTitle)
	}

	if src.IsAuthenticationEnabled != nil {
		return json.Marshal(&src.IsAuthenticationEnabled)
	}

	if src.MEqMTWriteFixAppliedAt != nil {
		return json.Marshal(&src.MEqMTWriteFixAppliedAt)
	}

	if src.MinimumFreeStorageSpace != nil {
		return json.Marshal(&src.MinimumFreeStorageSpace)
	}

	if src.MinimumPasswordLength != nil {
		return json.Marshal(&src.MinimumPasswordLength)
	}

	if src.NewUserRoleIds != nil {
		return json.Marshal(&src.NewUserRoleIds)
	}

	if src.NewUserShowDashboardIds != nil {
		return json.Marshal(&src.NewUserShowDashboardIds)
	}

	if src.NewUserShowQueryIds != nil {
		return json.Marshal(&src.NewUserShowQueryIds)
	}

	if src.NewUserShowSignalIds != nil {
		return json.Marshal(&src.NewUserShowSignalIds)
	}

	if src.OpenIdConnectAuthority != nil {
		return json.Marshal(&src.OpenIdConnectAuthority)
	}

	if src.OpenIdConnectClientId != nil {
		return json.Marshal(&src.OpenIdConnectClientId)
	}

	if src.OpenIdConnectClientSecret != nil {
		return json.Marshal(&src.OpenIdConnectClientSecret)
	}

	if src.OpenIdConnectEndSessionRedirectUri != nil {
		return json.Marshal(&src.OpenIdConnectEndSessionRedirectUri)
	}

	if src.OpenIdConnectScopes != nil {
		return json.Marshal(&src.OpenIdConnectScopes)
	}

	if src.PasswordRequiredCharacterClasses != nil {
		return json.Marshal(&src.PasswordRequiredCharacterClasses)
	}

	if src.RawEventMaximumContentLength != nil {
		return json.Marshal(&src.RawEventMaximumContentLength)
	}

	if src.RawPayloadMaximumContentLength != nil {
		return json.Marshal(&src.RawPayloadMaximumContentLength)
	}

	if src.RequireApiKeyForWritingEvents != nil {
		return json.Marshal(&src.RequireApiKeyForWritingEvents)
	}

	if src.SecretKeyIsBackedUp != nil {
		return json.Marshal(&src.SecretKeyIsBackedUp)
	}

	if src.TelemetryId != nil {
		return json.Marshal(&src.TelemetryId)
	}

	if src.TelemetryReplyEmail != nil {
		return json.Marshal(&src.TelemetryReplyEmail)
	}

	if src.ThemeStyles != nil {
		return json.Marshal(&src.ThemeStyles)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Setting) GetActualInstance() (interface{}) {
	if obj.AuthenticationProvider != nil {
		return obj.AuthenticationProvider
	}

	if obj.AutomaticAccessADGroup != nil {
		return obj.AutomaticAccessADGroup
	}

	if obj.AutomaticallyProvisionAuthenticatedUsers != nil {
		return obj.AutomaticallyProvisionAuthenticatedUsers
	}

	if obj.AzureADAuthority != nil {
		return obj.AzureADAuthority
	}

	if obj.AzureADClientId != nil {
		return obj.AzureADClientId
	}

	if obj.AzureADClientKey != nil {
		return obj.AzureADClientKey
	}

	if obj.AzureADTenantId != nil {
		return obj.AzureADTenantId
	}

	if obj.BackupLocation != nil {
		return obj.BackupLocation
	}

	if obj.BackupUtcTimeOfDay != nil {
		return obj.BackupUtcTimeOfDay
	}

	if obj.BackupsToKeep != nil {
		return obj.BackupsToKeep
	}

	if obj.CheckForPackageUpdates != nil {
		return obj.CheckForPackageUpdates
	}

	if obj.CheckForUpdates != nil {
		return obj.CheckForUpdates
	}

	if obj.InstanceTitle != nil {
		return obj.InstanceTitle
	}

	if obj.IsAuthenticationEnabled != nil {
		return obj.IsAuthenticationEnabled
	}

	if obj.MEqMTWriteFixAppliedAt != nil {
		return obj.MEqMTWriteFixAppliedAt
	}

	if obj.MinimumFreeStorageSpace != nil {
		return obj.MinimumFreeStorageSpace
	}

	if obj.MinimumPasswordLength != nil {
		return obj.MinimumPasswordLength
	}

	if obj.NewUserRoleIds != nil {
		return obj.NewUserRoleIds
	}

	if obj.NewUserShowDashboardIds != nil {
		return obj.NewUserShowDashboardIds
	}

	if obj.NewUserShowQueryIds != nil {
		return obj.NewUserShowQueryIds
	}

	if obj.NewUserShowSignalIds != nil {
		return obj.NewUserShowSignalIds
	}

	if obj.OpenIdConnectAuthority != nil {
		return obj.OpenIdConnectAuthority
	}

	if obj.OpenIdConnectClientId != nil {
		return obj.OpenIdConnectClientId
	}

	if obj.OpenIdConnectClientSecret != nil {
		return obj.OpenIdConnectClientSecret
	}

	if obj.OpenIdConnectEndSessionRedirectUri != nil {
		return obj.OpenIdConnectEndSessionRedirectUri
	}

	if obj.OpenIdConnectScopes != nil {
		return obj.OpenIdConnectScopes
	}

	if obj.PasswordRequiredCharacterClasses != nil {
		return obj.PasswordRequiredCharacterClasses
	}

	if obj.RawEventMaximumContentLength != nil {
		return obj.RawEventMaximumContentLength
	}

	if obj.RawPayloadMaximumContentLength != nil {
		return obj.RawPayloadMaximumContentLength
	}

	if obj.RequireApiKeyForWritingEvents != nil {
		return obj.RequireApiKeyForWritingEvents
	}

	if obj.SecretKeyIsBackedUp != nil {
		return obj.SecretKeyIsBackedUp
	}

	if obj.TelemetryId != nil {
		return obj.TelemetryId
	}

	if obj.TelemetryReplyEmail != nil {
		return obj.TelemetryReplyEmail
	}

	if obj.ThemeStyles != nil {
		return obj.ThemeStyles
	}

	// all schemas are nil
	return nil
}

type NullableSetting struct {
	value *Setting
	isSet bool
}

func (v NullableSetting) Get() *Setting {
	return v.value
}

func (v *NullableSetting) Set(val *Setting) {
	v.value = val
	v.isSet = true
}

func (v NullableSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetting(val *Setting) *NullableSetting {
	return &NullableSetting{value: val, isSet: true}
}

func (v NullableSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


