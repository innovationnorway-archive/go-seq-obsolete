/*
 * Seq API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package seq

import (
	"encoding/json"
	"fmt"
)

// Setting - struct for Setting
type Setting struct {
	AuthenticationProvider *AuthenticationProvider
	AutomaticAccessADGroup *AutomaticAccessADGroup
	AutomaticallyProvisionAuthenticatedUsers *AutomaticallyProvisionAuthenticatedUsers
	AzureADAuthority *AzureADAuthority
	AzureADClientId *AzureADClientId
	AzureADClientKey *AzureADClientKey
	AzureADTenantId *AzureADTenantId
	BackupLocation *BackupLocation
	BackupUtcTimeOfDay *BackupUtcTimeOfDay
	BackupsToKeep *BackupsToKeep
	CheckForPackageUpdates *CheckForPackageUpdates
	CheckForUpdates *CheckForUpdates
	InstanceTitle *InstanceTitle
	IsAuthenticationEnabled *IsAuthenticationEnabled
	MEqMTWriteFixAppliedAt *MEqMTWriteFixAppliedAt
	MinimumFreeStorageSpace *MinimumFreeStorageSpace
	MinimumPasswordLength *MinimumPasswordLength
	NewUserRoleIds *NewUserRoleIds
	NewUserShowDashboardIds *NewUserShowDashboardIds
	NewUserShowQueryIds *NewUserShowQueryIds
	NewUserShowSignalIds *NewUserShowSignalIds
	OpenIdConnectAuthority *OpenIdConnectAuthority
	OpenIdConnectClientId *OpenIdConnectClientId
	OpenIdConnectClientSecret *OpenIdConnectClientSecret
	OpenIdConnectEndSessionRedirectUri *OpenIdConnectEndSessionRedirectUri
	OpenIdConnectScopes *OpenIdConnectScopes
	PasswordRequiredCharacterClasses *PasswordRequiredCharacterClasses
	RawEventMaximumContentLength *RawEventMaximumContentLength
	RawPayloadMaximumContentLength *RawPayloadMaximumContentLength
	RequireApiKeyForWritingEvents *RequireApiKeyForWritingEvents
	SecretKeyIsBackedUp *SecretKeyIsBackedUp
	TelemetryId *TelemetryId
	TelemetryReplyEmail *TelemetryReplyEmail
	ThemeStyles *ThemeStyles
}

// AuthenticationProviderAsSetting is a convenience function that returns AuthenticationProvider wrapped in Setting
func AuthenticationProviderAsSetting(v *AuthenticationProvider) Setting {
	return Setting{ AuthenticationProvider: v}
}

// AutomaticAccessADGroupAsSetting is a convenience function that returns AutomaticAccessADGroup wrapped in Setting
func AutomaticAccessADGroupAsSetting(v *AutomaticAccessADGroup) Setting {
	return Setting{ AutomaticAccessADGroup: v}
}

// AutomaticallyProvisionAuthenticatedUsersAsSetting is a convenience function that returns AutomaticallyProvisionAuthenticatedUsers wrapped in Setting
func AutomaticallyProvisionAuthenticatedUsersAsSetting(v *AutomaticallyProvisionAuthenticatedUsers) Setting {
	return Setting{ AutomaticallyProvisionAuthenticatedUsers: v}
}

// AzureADAuthorityAsSetting is a convenience function that returns AzureADAuthority wrapped in Setting
func AzureADAuthorityAsSetting(v *AzureADAuthority) Setting {
	return Setting{ AzureADAuthority: v}
}

// AzureADClientIdAsSetting is a convenience function that returns AzureADClientId wrapped in Setting
func AzureADClientIdAsSetting(v *AzureADClientId) Setting {
	return Setting{ AzureADClientId: v}
}

// AzureADClientKeyAsSetting is a convenience function that returns AzureADClientKey wrapped in Setting
func AzureADClientKeyAsSetting(v *AzureADClientKey) Setting {
	return Setting{ AzureADClientKey: v}
}

// AzureADTenantIdAsSetting is a convenience function that returns AzureADTenantId wrapped in Setting
func AzureADTenantIdAsSetting(v *AzureADTenantId) Setting {
	return Setting{ AzureADTenantId: v}
}

// BackupLocationAsSetting is a convenience function that returns BackupLocation wrapped in Setting
func BackupLocationAsSetting(v *BackupLocation) Setting {
	return Setting{ BackupLocation: v}
}

// BackupUtcTimeOfDayAsSetting is a convenience function that returns BackupUtcTimeOfDay wrapped in Setting
func BackupUtcTimeOfDayAsSetting(v *BackupUtcTimeOfDay) Setting {
	return Setting{ BackupUtcTimeOfDay: v}
}

// BackupsToKeepAsSetting is a convenience function that returns BackupsToKeep wrapped in Setting
func BackupsToKeepAsSetting(v *BackupsToKeep) Setting {
	return Setting{ BackupsToKeep: v}
}

// CheckForPackageUpdatesAsSetting is a convenience function that returns CheckForPackageUpdates wrapped in Setting
func CheckForPackageUpdatesAsSetting(v *CheckForPackageUpdates) Setting {
	return Setting{ CheckForPackageUpdates: v}
}

// CheckForUpdatesAsSetting is a convenience function that returns CheckForUpdates wrapped in Setting
func CheckForUpdatesAsSetting(v *CheckForUpdates) Setting {
	return Setting{ CheckForUpdates: v}
}

// InstanceTitleAsSetting is a convenience function that returns InstanceTitle wrapped in Setting
func InstanceTitleAsSetting(v *InstanceTitle) Setting {
	return Setting{ InstanceTitle: v}
}

// IsAuthenticationEnabledAsSetting is a convenience function that returns IsAuthenticationEnabled wrapped in Setting
func IsAuthenticationEnabledAsSetting(v *IsAuthenticationEnabled) Setting {
	return Setting{ IsAuthenticationEnabled: v}
}

// MEqMTWriteFixAppliedAtAsSetting is a convenience function that returns MEqMTWriteFixAppliedAt wrapped in Setting
func MEqMTWriteFixAppliedAtAsSetting(v *MEqMTWriteFixAppliedAt) Setting {
	return Setting{ MEqMTWriteFixAppliedAt: v}
}

// MinimumFreeStorageSpaceAsSetting is a convenience function that returns MinimumFreeStorageSpace wrapped in Setting
func MinimumFreeStorageSpaceAsSetting(v *MinimumFreeStorageSpace) Setting {
	return Setting{ MinimumFreeStorageSpace: v}
}

// MinimumPasswordLengthAsSetting is a convenience function that returns MinimumPasswordLength wrapped in Setting
func MinimumPasswordLengthAsSetting(v *MinimumPasswordLength) Setting {
	return Setting{ MinimumPasswordLength: v}
}

// NewUserRoleIdsAsSetting is a convenience function that returns NewUserRoleIds wrapped in Setting
func NewUserRoleIdsAsSetting(v *NewUserRoleIds) Setting {
	return Setting{ NewUserRoleIds: v}
}

// NewUserShowDashboardIdsAsSetting is a convenience function that returns NewUserShowDashboardIds wrapped in Setting
func NewUserShowDashboardIdsAsSetting(v *NewUserShowDashboardIds) Setting {
	return Setting{ NewUserShowDashboardIds: v}
}

// NewUserShowQueryIdsAsSetting is a convenience function that returns NewUserShowQueryIds wrapped in Setting
func NewUserShowQueryIdsAsSetting(v *NewUserShowQueryIds) Setting {
	return Setting{ NewUserShowQueryIds: v}
}

// NewUserShowSignalIdsAsSetting is a convenience function that returns NewUserShowSignalIds wrapped in Setting
func NewUserShowSignalIdsAsSetting(v *NewUserShowSignalIds) Setting {
	return Setting{ NewUserShowSignalIds: v}
}

// OpenIdConnectAuthorityAsSetting is a convenience function that returns OpenIdConnectAuthority wrapped in Setting
func OpenIdConnectAuthorityAsSetting(v *OpenIdConnectAuthority) Setting {
	return Setting{ OpenIdConnectAuthority: v}
}

// OpenIdConnectClientIdAsSetting is a convenience function that returns OpenIdConnectClientId wrapped in Setting
func OpenIdConnectClientIdAsSetting(v *OpenIdConnectClientId) Setting {
	return Setting{ OpenIdConnectClientId: v}
}

// OpenIdConnectClientSecretAsSetting is a convenience function that returns OpenIdConnectClientSecret wrapped in Setting
func OpenIdConnectClientSecretAsSetting(v *OpenIdConnectClientSecret) Setting {
	return Setting{ OpenIdConnectClientSecret: v}
}

// OpenIdConnectEndSessionRedirectUriAsSetting is a convenience function that returns OpenIdConnectEndSessionRedirectUri wrapped in Setting
func OpenIdConnectEndSessionRedirectUriAsSetting(v *OpenIdConnectEndSessionRedirectUri) Setting {
	return Setting{ OpenIdConnectEndSessionRedirectUri: v}
}

// OpenIdConnectScopesAsSetting is a convenience function that returns OpenIdConnectScopes wrapped in Setting
func OpenIdConnectScopesAsSetting(v *OpenIdConnectScopes) Setting {
	return Setting{ OpenIdConnectScopes: v}
}

// PasswordRequiredCharacterClassesAsSetting is a convenience function that returns PasswordRequiredCharacterClasses wrapped in Setting
func PasswordRequiredCharacterClassesAsSetting(v *PasswordRequiredCharacterClasses) Setting {
	return Setting{ PasswordRequiredCharacterClasses: v}
}

// RawEventMaximumContentLengthAsSetting is a convenience function that returns RawEventMaximumContentLength wrapped in Setting
func RawEventMaximumContentLengthAsSetting(v *RawEventMaximumContentLength) Setting {
	return Setting{ RawEventMaximumContentLength: v}
}

// RawPayloadMaximumContentLengthAsSetting is a convenience function that returns RawPayloadMaximumContentLength wrapped in Setting
func RawPayloadMaximumContentLengthAsSetting(v *RawPayloadMaximumContentLength) Setting {
	return Setting{ RawPayloadMaximumContentLength: v}
}

// RequireApiKeyForWritingEventsAsSetting is a convenience function that returns RequireApiKeyForWritingEvents wrapped in Setting
func RequireApiKeyForWritingEventsAsSetting(v *RequireApiKeyForWritingEvents) Setting {
	return Setting{ RequireApiKeyForWritingEvents: v}
}

// SecretKeyIsBackedUpAsSetting is a convenience function that returns SecretKeyIsBackedUp wrapped in Setting
func SecretKeyIsBackedUpAsSetting(v *SecretKeyIsBackedUp) Setting {
	return Setting{ SecretKeyIsBackedUp: v}
}

// TelemetryIdAsSetting is a convenience function that returns TelemetryId wrapped in Setting
func TelemetryIdAsSetting(v *TelemetryId) Setting {
	return Setting{ TelemetryId: v}
}

// TelemetryReplyEmailAsSetting is a convenience function that returns TelemetryReplyEmail wrapped in Setting
func TelemetryReplyEmailAsSetting(v *TelemetryReplyEmail) Setting {
	return Setting{ TelemetryReplyEmail: v}
}

// ThemeStylesAsSetting is a convenience function that returns ThemeStyles wrapped in Setting
func ThemeStylesAsSetting(v *ThemeStyles) Setting {
	return Setting{ ThemeStyles: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Setting) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AuthenticationProvider
	err = json.Unmarshal(data, &dst.AuthenticationProvider)
	if err == nil {
		jsonAuthenticationProvider, _ := json.Marshal(dst.AuthenticationProvider)
		if string(jsonAuthenticationProvider) == "{}" { // empty struct
			dst.AuthenticationProvider = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticationProvider = nil
	}

	// try to unmarshal data into AutomaticAccessADGroup
	err = json.Unmarshal(data, &dst.AutomaticAccessADGroup)
	if err == nil {
		jsonAutomaticAccessADGroup, _ := json.Marshal(dst.AutomaticAccessADGroup)
		if string(jsonAutomaticAccessADGroup) == "{}" { // empty struct
			dst.AutomaticAccessADGroup = nil
		} else {
			match++
		}
	} else {
		dst.AutomaticAccessADGroup = nil
	}

	// try to unmarshal data into AutomaticallyProvisionAuthenticatedUsers
	err = json.Unmarshal(data, &dst.AutomaticallyProvisionAuthenticatedUsers)
	if err == nil {
		jsonAutomaticallyProvisionAuthenticatedUsers, _ := json.Marshal(dst.AutomaticallyProvisionAuthenticatedUsers)
		if string(jsonAutomaticallyProvisionAuthenticatedUsers) == "{}" { // empty struct
			dst.AutomaticallyProvisionAuthenticatedUsers = nil
		} else {
			match++
		}
	} else {
		dst.AutomaticallyProvisionAuthenticatedUsers = nil
	}

	// try to unmarshal data into AzureADAuthority
	err = json.Unmarshal(data, &dst.AzureADAuthority)
	if err == nil {
		jsonAzureADAuthority, _ := json.Marshal(dst.AzureADAuthority)
		if string(jsonAzureADAuthority) == "{}" { // empty struct
			dst.AzureADAuthority = nil
		} else {
			match++
		}
	} else {
		dst.AzureADAuthority = nil
	}

	// try to unmarshal data into AzureADClientId
	err = json.Unmarshal(data, &dst.AzureADClientId)
	if err == nil {
		jsonAzureADClientId, _ := json.Marshal(dst.AzureADClientId)
		if string(jsonAzureADClientId) == "{}" { // empty struct
			dst.AzureADClientId = nil
		} else {
			match++
		}
	} else {
		dst.AzureADClientId = nil
	}

	// try to unmarshal data into AzureADClientKey
	err = json.Unmarshal(data, &dst.AzureADClientKey)
	if err == nil {
		jsonAzureADClientKey, _ := json.Marshal(dst.AzureADClientKey)
		if string(jsonAzureADClientKey) == "{}" { // empty struct
			dst.AzureADClientKey = nil
		} else {
			match++
		}
	} else {
		dst.AzureADClientKey = nil
	}

	// try to unmarshal data into AzureADTenantId
	err = json.Unmarshal(data, &dst.AzureADTenantId)
	if err == nil {
		jsonAzureADTenantId, _ := json.Marshal(dst.AzureADTenantId)
		if string(jsonAzureADTenantId) == "{}" { // empty struct
			dst.AzureADTenantId = nil
		} else {
			match++
		}
	} else {
		dst.AzureADTenantId = nil
	}

	// try to unmarshal data into BackupLocation
	err = json.Unmarshal(data, &dst.BackupLocation)
	if err == nil {
		jsonBackupLocation, _ := json.Marshal(dst.BackupLocation)
		if string(jsonBackupLocation) == "{}" { // empty struct
			dst.BackupLocation = nil
		} else {
			match++
		}
	} else {
		dst.BackupLocation = nil
	}

	// try to unmarshal data into BackupUtcTimeOfDay
	err = json.Unmarshal(data, &dst.BackupUtcTimeOfDay)
	if err == nil {
		jsonBackupUtcTimeOfDay, _ := json.Marshal(dst.BackupUtcTimeOfDay)
		if string(jsonBackupUtcTimeOfDay) == "{}" { // empty struct
			dst.BackupUtcTimeOfDay = nil
		} else {
			match++
		}
	} else {
		dst.BackupUtcTimeOfDay = nil
	}

	// try to unmarshal data into BackupsToKeep
	err = json.Unmarshal(data, &dst.BackupsToKeep)
	if err == nil {
		jsonBackupsToKeep, _ := json.Marshal(dst.BackupsToKeep)
		if string(jsonBackupsToKeep) == "{}" { // empty struct
			dst.BackupsToKeep = nil
		} else {
			match++
		}
	} else {
		dst.BackupsToKeep = nil
	}

	// try to unmarshal data into CheckForPackageUpdates
	err = json.Unmarshal(data, &dst.CheckForPackageUpdates)
	if err == nil {
		jsonCheckForPackageUpdates, _ := json.Marshal(dst.CheckForPackageUpdates)
		if string(jsonCheckForPackageUpdates) == "{}" { // empty struct
			dst.CheckForPackageUpdates = nil
		} else {
			match++
		}
	} else {
		dst.CheckForPackageUpdates = nil
	}

	// try to unmarshal data into CheckForUpdates
	err = json.Unmarshal(data, &dst.CheckForUpdates)
	if err == nil {
		jsonCheckForUpdates, _ := json.Marshal(dst.CheckForUpdates)
		if string(jsonCheckForUpdates) == "{}" { // empty struct
			dst.CheckForUpdates = nil
		} else {
			match++
		}
	} else {
		dst.CheckForUpdates = nil
	}

	// try to unmarshal data into InstanceTitle
	err = json.Unmarshal(data, &dst.InstanceTitle)
	if err == nil {
		jsonInstanceTitle, _ := json.Marshal(dst.InstanceTitle)
		if string(jsonInstanceTitle) == "{}" { // empty struct
			dst.InstanceTitle = nil
		} else {
			match++
		}
	} else {
		dst.InstanceTitle = nil
	}

	// try to unmarshal data into IsAuthenticationEnabled
	err = json.Unmarshal(data, &dst.IsAuthenticationEnabled)
	if err == nil {
		jsonIsAuthenticationEnabled, _ := json.Marshal(dst.IsAuthenticationEnabled)
		if string(jsonIsAuthenticationEnabled) == "{}" { // empty struct
			dst.IsAuthenticationEnabled = nil
		} else {
			match++
		}
	} else {
		dst.IsAuthenticationEnabled = nil
	}

	// try to unmarshal data into MEqMTWriteFixAppliedAt
	err = json.Unmarshal(data, &dst.MEqMTWriteFixAppliedAt)
	if err == nil {
		jsonMEqMTWriteFixAppliedAt, _ := json.Marshal(dst.MEqMTWriteFixAppliedAt)
		if string(jsonMEqMTWriteFixAppliedAt) == "{}" { // empty struct
			dst.MEqMTWriteFixAppliedAt = nil
		} else {
			match++
		}
	} else {
		dst.MEqMTWriteFixAppliedAt = nil
	}

	// try to unmarshal data into MinimumFreeStorageSpace
	err = json.Unmarshal(data, &dst.MinimumFreeStorageSpace)
	if err == nil {
		jsonMinimumFreeStorageSpace, _ := json.Marshal(dst.MinimumFreeStorageSpace)
		if string(jsonMinimumFreeStorageSpace) == "{}" { // empty struct
			dst.MinimumFreeStorageSpace = nil
		} else {
			match++
		}
	} else {
		dst.MinimumFreeStorageSpace = nil
	}

	// try to unmarshal data into MinimumPasswordLength
	err = json.Unmarshal(data, &dst.MinimumPasswordLength)
	if err == nil {
		jsonMinimumPasswordLength, _ := json.Marshal(dst.MinimumPasswordLength)
		if string(jsonMinimumPasswordLength) == "{}" { // empty struct
			dst.MinimumPasswordLength = nil
		} else {
			match++
		}
	} else {
		dst.MinimumPasswordLength = nil
	}

	// try to unmarshal data into NewUserRoleIds
	err = json.Unmarshal(data, &dst.NewUserRoleIds)
	if err == nil {
		jsonNewUserRoleIds, _ := json.Marshal(dst.NewUserRoleIds)
		if string(jsonNewUserRoleIds) == "{}" { // empty struct
			dst.NewUserRoleIds = nil
		} else {
			match++
		}
	} else {
		dst.NewUserRoleIds = nil
	}

	// try to unmarshal data into NewUserShowDashboardIds
	err = json.Unmarshal(data, &dst.NewUserShowDashboardIds)
	if err == nil {
		jsonNewUserShowDashboardIds, _ := json.Marshal(dst.NewUserShowDashboardIds)
		if string(jsonNewUserShowDashboardIds) == "{}" { // empty struct
			dst.NewUserShowDashboardIds = nil
		} else {
			match++
		}
	} else {
		dst.NewUserShowDashboardIds = nil
	}

	// try to unmarshal data into NewUserShowQueryIds
	err = json.Unmarshal(data, &dst.NewUserShowQueryIds)
	if err == nil {
		jsonNewUserShowQueryIds, _ := json.Marshal(dst.NewUserShowQueryIds)
		if string(jsonNewUserShowQueryIds) == "{}" { // empty struct
			dst.NewUserShowQueryIds = nil
		} else {
			match++
		}
	} else {
		dst.NewUserShowQueryIds = nil
	}

	// try to unmarshal data into NewUserShowSignalIds
	err = json.Unmarshal(data, &dst.NewUserShowSignalIds)
	if err == nil {
		jsonNewUserShowSignalIds, _ := json.Marshal(dst.NewUserShowSignalIds)
		if string(jsonNewUserShowSignalIds) == "{}" { // empty struct
			dst.NewUserShowSignalIds = nil
		} else {
			match++
		}
	} else {
		dst.NewUserShowSignalIds = nil
	}

	// try to unmarshal data into OpenIdConnectAuthority
	err = json.Unmarshal(data, &dst.OpenIdConnectAuthority)
	if err == nil {
		jsonOpenIdConnectAuthority, _ := json.Marshal(dst.OpenIdConnectAuthority)
		if string(jsonOpenIdConnectAuthority) == "{}" { // empty struct
			dst.OpenIdConnectAuthority = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectAuthority = nil
	}

	// try to unmarshal data into OpenIdConnectClientId
	err = json.Unmarshal(data, &dst.OpenIdConnectClientId)
	if err == nil {
		jsonOpenIdConnectClientId, _ := json.Marshal(dst.OpenIdConnectClientId)
		if string(jsonOpenIdConnectClientId) == "{}" { // empty struct
			dst.OpenIdConnectClientId = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectClientId = nil
	}

	// try to unmarshal data into OpenIdConnectClientSecret
	err = json.Unmarshal(data, &dst.OpenIdConnectClientSecret)
	if err == nil {
		jsonOpenIdConnectClientSecret, _ := json.Marshal(dst.OpenIdConnectClientSecret)
		if string(jsonOpenIdConnectClientSecret) == "{}" { // empty struct
			dst.OpenIdConnectClientSecret = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectClientSecret = nil
	}

	// try to unmarshal data into OpenIdConnectEndSessionRedirectUri
	err = json.Unmarshal(data, &dst.OpenIdConnectEndSessionRedirectUri)
	if err == nil {
		jsonOpenIdConnectEndSessionRedirectUri, _ := json.Marshal(dst.OpenIdConnectEndSessionRedirectUri)
		if string(jsonOpenIdConnectEndSessionRedirectUri) == "{}" { // empty struct
			dst.OpenIdConnectEndSessionRedirectUri = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectEndSessionRedirectUri = nil
	}

	// try to unmarshal data into OpenIdConnectScopes
	err = json.Unmarshal(data, &dst.OpenIdConnectScopes)
	if err == nil {
		jsonOpenIdConnectScopes, _ := json.Marshal(dst.OpenIdConnectScopes)
		if string(jsonOpenIdConnectScopes) == "{}" { // empty struct
			dst.OpenIdConnectScopes = nil
		} else {
			match++
		}
	} else {
		dst.OpenIdConnectScopes = nil
	}

	// try to unmarshal data into PasswordRequiredCharacterClasses
	err = json.Unmarshal(data, &dst.PasswordRequiredCharacterClasses)
	if err == nil {
		jsonPasswordRequiredCharacterClasses, _ := json.Marshal(dst.PasswordRequiredCharacterClasses)
		if string(jsonPasswordRequiredCharacterClasses) == "{}" { // empty struct
			dst.PasswordRequiredCharacterClasses = nil
		} else {
			match++
		}
	} else {
		dst.PasswordRequiredCharacterClasses = nil
	}

	// try to unmarshal data into RawEventMaximumContentLength
	err = json.Unmarshal(data, &dst.RawEventMaximumContentLength)
	if err == nil {
		jsonRawEventMaximumContentLength, _ := json.Marshal(dst.RawEventMaximumContentLength)
		if string(jsonRawEventMaximumContentLength) == "{}" { // empty struct
			dst.RawEventMaximumContentLength = nil
		} else {
			match++
		}
	} else {
		dst.RawEventMaximumContentLength = nil
	}

	// try to unmarshal data into RawPayloadMaximumContentLength
	err = json.Unmarshal(data, &dst.RawPayloadMaximumContentLength)
	if err == nil {
		jsonRawPayloadMaximumContentLength, _ := json.Marshal(dst.RawPayloadMaximumContentLength)
		if string(jsonRawPayloadMaximumContentLength) == "{}" { // empty struct
			dst.RawPayloadMaximumContentLength = nil
		} else {
			match++
		}
	} else {
		dst.RawPayloadMaximumContentLength = nil
	}

	// try to unmarshal data into RequireApiKeyForWritingEvents
	err = json.Unmarshal(data, &dst.RequireApiKeyForWritingEvents)
	if err == nil {
		jsonRequireApiKeyForWritingEvents, _ := json.Marshal(dst.RequireApiKeyForWritingEvents)
		if string(jsonRequireApiKeyForWritingEvents) == "{}" { // empty struct
			dst.RequireApiKeyForWritingEvents = nil
		} else {
			match++
		}
	} else {
		dst.RequireApiKeyForWritingEvents = nil
	}

	// try to unmarshal data into SecretKeyIsBackedUp
	err = json.Unmarshal(data, &dst.SecretKeyIsBackedUp)
	if err == nil {
		jsonSecretKeyIsBackedUp, _ := json.Marshal(dst.SecretKeyIsBackedUp)
		if string(jsonSecretKeyIsBackedUp) == "{}" { // empty struct
			dst.SecretKeyIsBackedUp = nil
		} else {
			match++
		}
	} else {
		dst.SecretKeyIsBackedUp = nil
	}

	// try to unmarshal data into TelemetryId
	err = json.Unmarshal(data, &dst.TelemetryId)
	if err == nil {
		jsonTelemetryId, _ := json.Marshal(dst.TelemetryId)
		if string(jsonTelemetryId) == "{}" { // empty struct
			dst.TelemetryId = nil
		} else {
			match++
		}
	} else {
		dst.TelemetryId = nil
	}

	// try to unmarshal data into TelemetryReplyEmail
	err = json.Unmarshal(data, &dst.TelemetryReplyEmail)
	if err == nil {
		jsonTelemetryReplyEmail, _ := json.Marshal(dst.TelemetryReplyEmail)
		if string(jsonTelemetryReplyEmail) == "{}" { // empty struct
			dst.TelemetryReplyEmail = nil
		} else {
			match++
		}
	} else {
		dst.TelemetryReplyEmail = nil
	}

	// try to unmarshal data into ThemeStyles
	err = json.Unmarshal(data, &dst.ThemeStyles)
	if err == nil {
		jsonThemeStyles, _ := json.Marshal(dst.ThemeStyles)
		if string(jsonThemeStyles) == "{}" { // empty struct
			dst.ThemeStyles = nil
		} else {
			match++
		}
	} else {
		dst.ThemeStyles = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AuthenticationProvider = nil
		dst.AutomaticAccessADGroup = nil
		dst.AutomaticallyProvisionAuthenticatedUsers = nil
		dst.AzureADAuthority = nil
		dst.AzureADClientId = nil
		dst.AzureADClientKey = nil
		dst.AzureADTenantId = nil
		dst.BackupLocation = nil
		dst.BackupUtcTimeOfDay = nil
		dst.BackupsToKeep = nil
		dst.CheckForPackageUpdates = nil
		dst.CheckForUpdates = nil
		dst.InstanceTitle = nil
		dst.IsAuthenticationEnabled = nil
		dst.MEqMTWriteFixAppliedAt = nil
		dst.MinimumFreeStorageSpace = nil
		dst.MinimumPasswordLength = nil
		dst.NewUserRoleIds = nil
		dst.NewUserShowDashboardIds = nil
		dst.NewUserShowQueryIds = nil
		dst.NewUserShowSignalIds = nil
		dst.OpenIdConnectAuthority = nil
		dst.OpenIdConnectClientId = nil
		dst.OpenIdConnectClientSecret = nil
		dst.OpenIdConnectEndSessionRedirectUri = nil
		dst.OpenIdConnectScopes = nil
		dst.PasswordRequiredCharacterClasses = nil
		dst.RawEventMaximumContentLength = nil
		dst.RawPayloadMaximumContentLength = nil
		dst.RequireApiKeyForWritingEvents = nil
		dst.SecretKeyIsBackedUp = nil
		dst.TelemetryId = nil
		dst.TelemetryReplyEmail = nil
		dst.ThemeStyles = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Setting)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Setting)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Setting) MarshalJSON() ([]byte, error) {
	if src.AuthenticationProvider != nil {
		return json.Marshal(&src.AuthenticationProvider)
	}

	if src.AutomaticAccessADGroup != nil {
		return json.Marshal(&src.AutomaticAccessADGroup)
	}

	if src.AutomaticallyProvisionAuthenticatedUsers != nil {
		return json.Marshal(&src.AutomaticallyProvisionAuthenticatedUsers)
	}

	if src.AzureADAuthority != nil {
		return json.Marshal(&src.AzureADAuthority)
	}

	if src.AzureADClientId != nil {
		return json.Marshal(&src.AzureADClientId)
	}

	if src.AzureADClientKey != nil {
		return json.Marshal(&src.AzureADClientKey)
	}

	if src.AzureADTenantId != nil {
		return json.Marshal(&src.AzureADTenantId)
	}

	if src.BackupLocation != nil {
		return json.Marshal(&src.BackupLocation)
	}

	if src.BackupUtcTimeOfDay != nil {
		return json.Marshal(&src.BackupUtcTimeOfDay)
	}

	if src.BackupsToKeep != nil {
		return json.Marshal(&src.BackupsToKeep)
	}

	if src.CheckForPackageUpdates != nil {
		return json.Marshal(&src.CheckForPackageUpdates)
	}

	if src.CheckForUpdates != nil {
		return json.Marshal(&src.CheckForUpdates)
	}

	if src.InstanceTitle != nil {
		return json.Marshal(&src.InstanceTitle)
	}

	if src.IsAuthenticationEnabled != nil {
		return json.Marshal(&src.IsAuthenticationEnabled)
	}

	if src.MEqMTWriteFixAppliedAt != nil {
		return json.Marshal(&src.MEqMTWriteFixAppliedAt)
	}

	if src.MinimumFreeStorageSpace != nil {
		return json.Marshal(&src.MinimumFreeStorageSpace)
	}

	if src.MinimumPasswordLength != nil {
		return json.Marshal(&src.MinimumPasswordLength)
	}

	if src.NewUserRoleIds != nil {
		return json.Marshal(&src.NewUserRoleIds)
	}

	if src.NewUserShowDashboardIds != nil {
		return json.Marshal(&src.NewUserShowDashboardIds)
	}

	if src.NewUserShowQueryIds != nil {
		return json.Marshal(&src.NewUserShowQueryIds)
	}

	if src.NewUserShowSignalIds != nil {
		return json.Marshal(&src.NewUserShowSignalIds)
	}

	if src.OpenIdConnectAuthority != nil {
		return json.Marshal(&src.OpenIdConnectAuthority)
	}

	if src.OpenIdConnectClientId != nil {
		return json.Marshal(&src.OpenIdConnectClientId)
	}

	if src.OpenIdConnectClientSecret != nil {
		return json.Marshal(&src.OpenIdConnectClientSecret)
	}

	if src.OpenIdConnectEndSessionRedirectUri != nil {
		return json.Marshal(&src.OpenIdConnectEndSessionRedirectUri)
	}

	if src.OpenIdConnectScopes != nil {
		return json.Marshal(&src.OpenIdConnectScopes)
	}

	if src.PasswordRequiredCharacterClasses != nil {
		return json.Marshal(&src.PasswordRequiredCharacterClasses)
	}

	if src.RawEventMaximumContentLength != nil {
		return json.Marshal(&src.RawEventMaximumContentLength)
	}

	if src.RawPayloadMaximumContentLength != nil {
		return json.Marshal(&src.RawPayloadMaximumContentLength)
	}

	if src.RequireApiKeyForWritingEvents != nil {
		return json.Marshal(&src.RequireApiKeyForWritingEvents)
	}

	if src.SecretKeyIsBackedUp != nil {
		return json.Marshal(&src.SecretKeyIsBackedUp)
	}

	if src.TelemetryId != nil {
		return json.Marshal(&src.TelemetryId)
	}

	if src.TelemetryReplyEmail != nil {
		return json.Marshal(&src.TelemetryReplyEmail)
	}

	if src.ThemeStyles != nil {
		return json.Marshal(&src.ThemeStyles)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Setting) GetActualInstance() (interface{}) {
	if obj.AuthenticationProvider != nil {
		return obj.AuthenticationProvider
	}

	if obj.AutomaticAccessADGroup != nil {
		return obj.AutomaticAccessADGroup
	}

	if obj.AutomaticallyProvisionAuthenticatedUsers != nil {
		return obj.AutomaticallyProvisionAuthenticatedUsers
	}

	if obj.AzureADAuthority != nil {
		return obj.AzureADAuthority
	}

	if obj.AzureADClientId != nil {
		return obj.AzureADClientId
	}

	if obj.AzureADClientKey != nil {
		return obj.AzureADClientKey
	}

	if obj.AzureADTenantId != nil {
		return obj.AzureADTenantId
	}

	if obj.BackupLocation != nil {
		return obj.BackupLocation
	}

	if obj.BackupUtcTimeOfDay != nil {
		return obj.BackupUtcTimeOfDay
	}

	if obj.BackupsToKeep != nil {
		return obj.BackupsToKeep
	}

	if obj.CheckForPackageUpdates != nil {
		return obj.CheckForPackageUpdates
	}

	if obj.CheckForUpdates != nil {
		return obj.CheckForUpdates
	}

	if obj.InstanceTitle != nil {
		return obj.InstanceTitle
	}

	if obj.IsAuthenticationEnabled != nil {
		return obj.IsAuthenticationEnabled
	}

	if obj.MEqMTWriteFixAppliedAt != nil {
		return obj.MEqMTWriteFixAppliedAt
	}

	if obj.MinimumFreeStorageSpace != nil {
		return obj.MinimumFreeStorageSpace
	}

	if obj.MinimumPasswordLength != nil {
		return obj.MinimumPasswordLength
	}

	if obj.NewUserRoleIds != nil {
		return obj.NewUserRoleIds
	}

	if obj.NewUserShowDashboardIds != nil {
		return obj.NewUserShowDashboardIds
	}

	if obj.NewUserShowQueryIds != nil {
		return obj.NewUserShowQueryIds
	}

	if obj.NewUserShowSignalIds != nil {
		return obj.NewUserShowSignalIds
	}

	if obj.OpenIdConnectAuthority != nil {
		return obj.OpenIdConnectAuthority
	}

	if obj.OpenIdConnectClientId != nil {
		return obj.OpenIdConnectClientId
	}

	if obj.OpenIdConnectClientSecret != nil {
		return obj.OpenIdConnectClientSecret
	}

	if obj.OpenIdConnectEndSessionRedirectUri != nil {
		return obj.OpenIdConnectEndSessionRedirectUri
	}

	if obj.OpenIdConnectScopes != nil {
		return obj.OpenIdConnectScopes
	}

	if obj.PasswordRequiredCharacterClasses != nil {
		return obj.PasswordRequiredCharacterClasses
	}

	if obj.RawEventMaximumContentLength != nil {
		return obj.RawEventMaximumContentLength
	}

	if obj.RawPayloadMaximumContentLength != nil {
		return obj.RawPayloadMaximumContentLength
	}

	if obj.RequireApiKeyForWritingEvents != nil {
		return obj.RequireApiKeyForWritingEvents
	}

	if obj.SecretKeyIsBackedUp != nil {
		return obj.SecretKeyIsBackedUp
	}

	if obj.TelemetryId != nil {
		return obj.TelemetryId
	}

	if obj.TelemetryReplyEmail != nil {
		return obj.TelemetryReplyEmail
	}

	if obj.ThemeStyles != nil {
		return obj.ThemeStyles
	}

	// all schemas are nil
	return nil
}

type NullableSetting struct {
	value *Setting
	isSet bool
}

func (v NullableSetting) Get() *Setting {
	return v.value
}

func (v *NullableSetting) Set(val *Setting) {
	v.value = val
	v.isSet = true
}

func (v NullableSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetting(val *Setting) *NullableSetting {
	return &NullableSetting{value: val, isSet: true}
}

func (v NullableSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


