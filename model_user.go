/*
 * Seq API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package seq

import (
	"encoding/json"
)

// User struct for User
type User struct {
	Id *string `json:"Id,omitempty"`
	Username string `json:"Username"`
	NewPassword *string `json:"NewPassword,omitempty"`
	MustChangePassword *bool `json:"MustChangePassword,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	EmailAddress *string `json:"EmailAddress,omitempty"`
	Preferences *map[string]interface{} `json:"Preferences,omitempty"`
	RoleIds *[]string `json:"RoleIds,omitempty"`
	ViewFilter *map[string]interface{} `json:"ViewFilter,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(username string, ) *User {
	this := User{}
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *User) SetId(v string) {
	o.Id = &v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *User) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *User) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *User) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetMustChangePassword returns the MustChangePassword field value if set, zero value otherwise.
func (o *User) GetMustChangePassword() bool {
	if o == nil || o.MustChangePassword == nil {
		var ret bool
		return ret
	}
	return *o.MustChangePassword
}

// GetMustChangePasswordOk returns a tuple with the MustChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetMustChangePasswordOk() (*bool, bool) {
	if o == nil || o.MustChangePassword == nil {
		return nil, false
	}
	return o.MustChangePassword, true
}

// HasMustChangePassword returns a boolean if a field has been set.
func (o *User) HasMustChangePassword() bool {
	if o != nil && o.MustChangePassword != nil {
		return true
	}

	return false
}

// SetMustChangePassword gets a reference to the given bool and assigns it to the MustChangePassword field.
func (o *User) SetMustChangePassword(v bool) {
	o.MustChangePassword = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *User) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *User) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *User) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *User) GetEmailAddress() string {
	if o == nil || o.EmailAddress == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailAddressOk() (*string, bool) {
	if o == nil || o.EmailAddress == nil {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *User) HasEmailAddress() bool {
	if o != nil && o.EmailAddress != nil {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *User) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *User) GetPreferences() map[string]interface{} {
	if o == nil || o.Preferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPreferencesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *User) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]interface{} and assigns it to the Preferences field.
func (o *User) SetPreferences(v map[string]interface{}) {
	o.Preferences = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *User) GetRoleIds() []string {
	if o == nil || o.RoleIds == nil {
		var ret []string
		return ret
	}
	return *o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRoleIdsOk() (*[]string, bool) {
	if o == nil || o.RoleIds == nil {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *User) HasRoleIds() bool {
	if o != nil && o.RoleIds != nil {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *User) SetRoleIds(v []string) {
	o.RoleIds = &v
}

// GetViewFilter returns the ViewFilter field value if set, zero value otherwise.
func (o *User) GetViewFilter() map[string]interface{} {
	if o == nil || o.ViewFilter == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ViewFilter
}

// GetViewFilterOk returns a tuple with the ViewFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetViewFilterOk() (*map[string]interface{}, bool) {
	if o == nil || o.ViewFilter == nil {
		return nil, false
	}
	return o.ViewFilter, true
}

// HasViewFilter returns a boolean if a field has been set.
func (o *User) HasViewFilter() bool {
	if o != nil && o.ViewFilter != nil {
		return true
	}

	return false
}

// SetViewFilter gets a reference to the given map[string]interface{} and assigns it to the ViewFilter field.
func (o *User) SetViewFilter(v map[string]interface{}) {
	o.ViewFilter = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["Id"] = o.Id
	}
	if true {
		toSerialize["Username"] = o.Username
	}
	if o.NewPassword != nil {
		toSerialize["NewPassword"] = o.NewPassword
	}
	if o.MustChangePassword != nil {
		toSerialize["MustChangePassword"] = o.MustChangePassword
	}
	if o.DisplayName != nil {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if o.EmailAddress != nil {
		toSerialize["EmailAddress"] = o.EmailAddress
	}
	if o.Preferences != nil {
		toSerialize["Preferences"] = o.Preferences
	}
	if o.RoleIds != nil {
		toSerialize["RoleIds"] = o.RoleIds
	}
	if o.ViewFilter != nil {
		toSerialize["ViewFilter"] = o.ViewFilter
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


