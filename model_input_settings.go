/*
 * Seq API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package seq

import (
	"encoding/json"
)

// InputSettings struct for InputSettings
type InputSettings struct {
	AppliedProperties *[]map[string]interface{} `json:"AppliedProperties,omitempty"`
	MinimumLevel *string `json:"MinimumLevel,omitempty"`
	UseServerTimestamps *bool `json:"UseServerTimestamps,omitempty"`
}

// NewInputSettings instantiates a new InputSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSettings() *InputSettings {
	this := InputSettings{}
	return &this
}

// NewInputSettingsWithDefaults instantiates a new InputSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSettingsWithDefaults() *InputSettings {
	this := InputSettings{}
	return &this
}

// GetAppliedProperties returns the AppliedProperties field value if set, zero value otherwise.
func (o *InputSettings) GetAppliedProperties() []map[string]interface{} {
	if o == nil || o.AppliedProperties == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.AppliedProperties
}

// GetAppliedPropertiesOk returns a tuple with the AppliedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetAppliedPropertiesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.AppliedProperties == nil {
		return nil, false
	}
	return o.AppliedProperties, true
}

// HasAppliedProperties returns a boolean if a field has been set.
func (o *InputSettings) HasAppliedProperties() bool {
	if o != nil && o.AppliedProperties != nil {
		return true
	}

	return false
}

// SetAppliedProperties gets a reference to the given []map[string]interface{} and assigns it to the AppliedProperties field.
func (o *InputSettings) SetAppliedProperties(v []map[string]interface{}) {
	o.AppliedProperties = &v
}

// GetMinimumLevel returns the MinimumLevel field value if set, zero value otherwise.
func (o *InputSettings) GetMinimumLevel() string {
	if o == nil || o.MinimumLevel == nil {
		var ret string
		return ret
	}
	return *o.MinimumLevel
}

// GetMinimumLevelOk returns a tuple with the MinimumLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetMinimumLevelOk() (*string, bool) {
	if o == nil || o.MinimumLevel == nil {
		return nil, false
	}
	return o.MinimumLevel, true
}

// HasMinimumLevel returns a boolean if a field has been set.
func (o *InputSettings) HasMinimumLevel() bool {
	if o != nil && o.MinimumLevel != nil {
		return true
	}

	return false
}

// SetMinimumLevel gets a reference to the given string and assigns it to the MinimumLevel field.
func (o *InputSettings) SetMinimumLevel(v string) {
	o.MinimumLevel = &v
}

// GetUseServerTimestamps returns the UseServerTimestamps field value if set, zero value otherwise.
func (o *InputSettings) GetUseServerTimestamps() bool {
	if o == nil || o.UseServerTimestamps == nil {
		var ret bool
		return ret
	}
	return *o.UseServerTimestamps
}

// GetUseServerTimestampsOk returns a tuple with the UseServerTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetUseServerTimestampsOk() (*bool, bool) {
	if o == nil || o.UseServerTimestamps == nil {
		return nil, false
	}
	return o.UseServerTimestamps, true
}

// HasUseServerTimestamps returns a boolean if a field has been set.
func (o *InputSettings) HasUseServerTimestamps() bool {
	if o != nil && o.UseServerTimestamps != nil {
		return true
	}

	return false
}

// SetUseServerTimestamps gets a reference to the given bool and assigns it to the UseServerTimestamps field.
func (o *InputSettings) SetUseServerTimestamps(v bool) {
	o.UseServerTimestamps = &v
}

func (o InputSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppliedProperties != nil {
		toSerialize["AppliedProperties"] = o.AppliedProperties
	}
	if o.MinimumLevel != nil {
		toSerialize["MinimumLevel"] = o.MinimumLevel
	}
	if o.UseServerTimestamps != nil {
		toSerialize["UseServerTimestamps"] = o.UseServerTimestamps
	}
	return json.Marshal(toSerialize)
}

type NullableInputSettings struct {
	value *InputSettings
	isSet bool
}

func (v NullableInputSettings) Get() *InputSettings {
	return v.value
}

func (v *NullableInputSettings) Set(val *InputSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSettings(val *InputSettings) *NullableInputSettings {
	return &NullableInputSettings{value: val, isSet: true}
}

func (v NullableInputSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


